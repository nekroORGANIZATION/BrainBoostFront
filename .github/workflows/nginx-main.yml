name: Nginx → Prod (build in GitHub, run on VM)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  OWNER: nekroorganization
  IMAGE_NAME: nginx
  IMAGE_TAG: ${{ github.sha }}
  NGINX_SERVICE: nginx

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: main
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_WRITE_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:prod

  deploy-to-prod:
    needs: build-and-push
    runs-on: self-hosted
    environment: main
    steps:
      - name: Prepare SSH key (robust)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ runner.temp }}"
          KEYFILE="${{ runner.temp }}/main_ssh_key"

          # Если есть base64-ключ — используем его, иначе берём мультилайн OpenSSH
          if [ -n "${{ secrets.MAIN_SSH_KEY_B64 || '' }}" ]; then
            echo "${{ secrets.MAIN_SSH_KEY_B64 }}" | base64 -d | tr -d '\r' > "$KEYFILE"
          else
            printf '%s\n' "${{ secrets.MAIN_SSH_KEY }}" | sed 's/\r$//' > "$KEYFILE"
          fi
          chmod 600 "$KEYFILE"

          # Проверим, что ключ валиден и без passphrase
          ssh-keygen -y -f "$KEYFILE" >/dev/null 2>&1 || { echo "Invalid or passphrase-protected private key"; exit 1; }

          # Порт (по умолчанию 22)
          PORT="${{ secrets.MAIN_SSH_PORT }}"
          if [ -z "$PORT" ]; then PORT=22; fi
          echo "$PORT" > "${{ runner.temp }}/ssh_port"

          # known_hosts (не критично, если keyscan недоступен)
          if command -v ssh-keyscan >/dev/null 2>&1; then
            ssh-keyscan -p "$PORT" -H "${{ secrets.MAIN_TARGET_HOST }}" >> ~/.ssh/known_hosts || true
            chmod 644 ~/.ssh/known_hosts || true
          fi
      - name: Deploy via SSH
        shell: bash
        run: |
              set -euo pipefail
              KEYFILE="${{ runner.temp }}/main_ssh_key"
              PORT="${{ secrets.MAIN_SSH_PORT }}"
              [ -z "$PORT" ] && PORT=22

              ssh -i "$KEYFILE" -p "$PORT" -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
              "${{ secrets.MAIN_RUNNER_USER }}@${{ secrets.MAIN_TARGET_HOST }}" \
              GHCR_USER='${{ secrets.GHCR_USER }}' \
              GHCR_READ_TOKEN='${{ secrets.GHCR_READ_TOKEN }}' \
              NGINX_SERVICE='${{ env.NGINX_SERVICE }}' \
              bash -s <<'EOF'
              set -euo pipefail
              cd /opt/myapp
              
              if [[ -n "${GHCR_USER:-}" && -n "${GHCR_READ_TOKEN:-}" ]]; then
              echo "$GHCR_READ_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin || true
              fi

              docker compose pull "$NGINX_SERVICE"
              docker compose up -d "$NGINX_SERVICE"
              docker image prune -f
              EOF
